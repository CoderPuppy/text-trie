----------------------------------------------------------------
-- wren gayle romano <wren@community.haskell.org>   ~ 2015.03.23
----------------------------------------------------------------

-- By and large Cabal >=1.2 is fine; but >= 1.6 gives tested-with:
-- and source-repository:.
Cabal-Version:  >= 1.6
Build-Type:     Simple

Name:           bytestring-trie
Version:        0.3.0.2
Stability:      experimental
Homepage:       http://code.haskell.org/~wren/
Author:         wren gayle romano
Maintainer:     wren@community.haskell.org
Copyright:      Copyright (c) 2008--2015 wren gayle romano
License:        BSD3
License-File:   LICENSE

Category:       Data, Data Structures
Synopsis:       An efficient finite map from (byte)strings to values.
Description:    An efficient finite map from (byte)strings to values.
                .
                The implementation is based on big-endian patricia
                trees, like "Data.IntMap". We first trie on the
                elements of "Data.ByteString" and then trie on the
                big-endian bit representation of those elements.
                Patricia trees have efficient algorithms for union
                and other merging operations, but they're also quick
                for lookups and insertions.
                .
                If you are only interested in being able to associate
                strings to values, then you may prefer the @hashmap@
                package which is faster for those only needing a
                map-like structure. This package is intended for
                those who need the extra capabilities that a trie-like
                structure can offer (e.g., structure sharing to
                reduce memory costs for highly redundant keys,
                taking the submap of all keys with a given prefix,
                contextual mapping, extracting the minimum and
                maximum keys, etc.)


Tested-With:
    GHC == 7.8.3, GHC == 7.10.1
Extra-source-files:
    AUTHORS, VERSION
Source-Repository head
    Type:     darcs
    Location: http://community.haskell.org/~wren/bytestring-trie

----------------------------------------------------------------
--Flag useCinternal
--    Default:     False
--    Description: Use optimized C implementation for indexOfDifference.
--                 See notes in Data.Trie.ByteStringInternal.

----------------------------------------------------------------
Library
    Hs-Source-Dirs:  src
    Exposed-Modules: Data.Trie.ByteStringInternal
                   , Data.Trie.BigEndianPatricia.Base
                   , Data.Trie.BigEndianPatricia.Internal
                   , Data.Trie.BigEndianPatricia.Convenience
                   , Data.Trie.ArrayMapped.Base
                   , Data.Trie.ArrayMapped.Internal
                   -- Data.Trie.ArrayMapped.Convenience
    Other-Modules:   Data.Trie.BigEndianPatricia.BitTwiddle
                   , Data.Trie.BigEndianPatricia.Errors
                   , Data.Trie.ArrayMapped.SparseArray
                   , Data.Trie.ArrayMapped.Errors
                   -- | Currently unused; needs benchmarking
                   , Data.Trie.ArrayMapped.UnsafeST
                   -- | Was only for base < 4.5.0 aka GHC < 7.4
                   -- Data.Trie.ArrayMapped.PopCount
                   -- | Unused/Unnecessary
                   -- Data.Trie.ArrayMapped.UnsafeShift
    Build-Depends:   binary
                   -- Actual min-version of deepseq is unknown
                   , deepseq    >= 1.3  && < 1.5
                   , data-or    >= 1.0  && < 1.1
                   -- Assume strict lower bounds to clean up the CPP
                   , base       >= 4    && < 5
                   , bytestring >= 0.10 && < 0.11
    
--    if flag(useCinternal)
--        C-Sources:     src/Data/Trie/ByteStringInternal/indexOfDifference.c
--        CC-Options:    -O3
--        Cpp-Options:   -D__USE_C_INTERNAL__
-- Also need to add stuff to run Configure.hs, FWIW

----------------------------------------------------------------
----------------------------------------------------------- fin.